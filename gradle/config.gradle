ext {
    debugDetail = [
            'name'       : "Pocket CI Debug",
            'packageName': "com.kevalpatel2106.pocketci.debug",
    ]

    releaseDetail = [
            'name'       : "Pocket CI",
            'packageName': "com.kevalpatel2106.pocketci",
    ]

    buildConfig = [
            'compileSdk': 33,
            'targetSdk' : 33,
            'minSdk'    : 25,
            'buildTool' : '33.0.0',
    ]

    defaultLibConfig = {
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        resConfigs "en"

        consumerProguardFiles '../proguard-rules.pro'

        testInstrumentationRunner "com.kevalpatel2106.coreTest.runner.UiTestsRunner"
    }

    defaultAppConfig = {
        applicationId releaseDetail.packageName
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk

        //Versions config
        versionCode playStoreVersion.versionCode
        versionName playStoreVersion.versionName

        // Cleaning up package data for each test is slow. So, we're only enabling these for app
        // module where all the e2e tests sits. Other module (repository-impl) will use their own
        // hilt component to create new preferences/in-memory db, so they don't require cleaning up
        testInstrumentationRunnerArguments clearPackageData: 'true'
        testInstrumentationRunner "com.kevalpatel2106.coreTest.runner.UiTestsRunner"

        multiDexEnabled false
        resConfigs "en"
    }

    defaultAndroidConfig = {
        compileSdkVersion buildConfig.compileSdk
        buildToolsVersion buildConfig.buildTool

        compileOptions compileOption
        packagingOptions packageOption
        lintOptions lintOption
        testOptions testOption
        buildFeatures buildFeaturesOption
        composeOptions composeOption
        if (this.pluginManager.hasPlugin("org.jetbrains.kotlin.android")) kotlinOptions kotlinOption
        if (this.pluginManager.hasPlugin("dagger.hilt.android.plugin")) hilt hiltOptions
    }

    playStoreVersion = [
            "versionCode": getVersionCode(),
            "versionName": "0.1.0"
    ]

    signingConfig = {
        release {
            Properties releaseProperties = get_release_key_creds()
            storeFile file("${this.rootDir}/${releaseProperties.getProperty('KEY_PATH')}")
            storePassword releaseProperties.getProperty('KEY_PASSWORD')
            keyAlias releaseProperties.getProperty('KEY_ALIAS')
            keyPassword releaseProperties.getProperty('ALIAS_PASSWORD')
        }
        debug {
            Properties properties = get_debug_key_creds()
            storeFile file("${this.rootDir}/${properties.getProperty('KEY_PATH')}")
            storePassword properties.getProperty('KEY_PASSWORD')
            keyAlias properties.getProperty('KEY_ALIAS')
            keyPassword properties.getProperty('ALIAS_PASSWORD')
        }
    }

    packageOption = {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/rxjava.properties'
        exclude 'asm-license.txt'
        exclude 'NOTICE'
        exclude 'LICENSE.txt'
        exclude 'LICENSE'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/rxjava.properties'
        exclude 'protobuf.meta'
        exclude 'licenses/javolution.license.TXT'

        pickFirst '**/libjsc.so'
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libbytehook.so'
    }

    lintOption = {
        abortOnError true
        htmlReport true
        xmlReport true
        textReport true
        checkTestSources true
        ignoreWarnings true
        checkDependencies true
        checkReleaseBuilds false
        baseline file("${this.rootDir}/lint-baseline.xml")
    }

    compileOption = {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    testOption = {
        animationsDisabled = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            returnDefaultValues true
            includeAndroidResources = true
            all {
                maxParallelForks 4

                minHeapSize = "1024m"
                maxHeapSize = "1596m"

                testLogging {
                    events 'passed', 'skipped', 'failed'
                }
            }
        }
    }

    kotlinOption = {
        freeCompilerArgs += [
                "-Xinline-classes",
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi,androidx.paging.ExperimentalPagingApi",
                "-P",
                "plugin:androidx.compose.compiler.plugins.kotlin:suppressKotlinVersionCompatibilityCheck=true"
        ]
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    composeOption = {
        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()
        kotlinCompilerVersion = libs.versions.kotlin.get()
    }

    bundleOption = {
        language {
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
        texture {
            enableSplit = true
        }
    }

    buildFeaturesOption = {
        dataBinding = true
        aidl = false
        renderScript = false
        resValues = true
        shaders = false
        buildConfig = true
    }

    detektOption = {
        config = files("${this.rootDir}/detekt-config.yml")
        baseline = file("detekt/baseline.xmk")
        autoCorrect = true
    }

    hiltOptions = {
        enableAggregatingTask = true
    }
}

def get_debug_key_creds() {
    File debugCredentials = rootProject.file("${this.rootDir}/.creds/debug_keystore.properties")
    if (debugCredentials.exists()) {
        Properties properties = new Properties()
        properties.load(debugCredentials.newDataInputStream())
        return properties
    } else {
        throw new IllegalAccessException('Debug keystore.properties not found.')
    }
}

def get_release_key_creds() {
    File playStoreCredentials = rootProject.file("${this.rootDir}/.creds/keystore.properties")
    if (playStoreCredentials.exists()) {
        Properties properties = new Properties()
        properties.load(playStoreCredentials.newDataInputStream())
        return properties
    } else {
        logger.error('Cannot sign with play store credentials as keystore.properties not found. Generating with debug certificates.')
        return get_debug_key_creds()
    }
}

static def getVersionCode() {
    if (System.getenv().containsKey("CI")) {
        def base = 10000
        def code = System.getenv().getOrDefault("GITHUB_RUN_NUMBER", "1").toInteger() + base
        println("CI Version code is: $code")
        return code
    } else {
        return 1
    }
}
