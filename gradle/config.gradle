ext {
    debugDetail = [
            'name'       : "Pocket CI Debug",
            'packageName': "com.kevalpatel2106.pocketci.debug",
    ]

    releaseDetail = [
            'name'       : "Pocket CI",
            'packageName': "com.kevalpatel2106.pocketci",
    ]

    sdk = [
            'compileSdk': 32,
            'targetSdk' : 32,
            'minSdk'    : 23,
    ]

    playStoreVersion = [
            "version_code": getVersionCode(),
            "major"       : 0,
            "minor"       : 1,
            "patch"       : 0
    ]

    packageOption = {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/rxjava.properties'
        exclude 'asm-license.txt'
        exclude 'NOTICE'
        exclude 'LICENSE.txt'
        exclude 'LICENSE'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/rxjava.properties'
        exclude 'protobuf.meta'
        exclude 'licenses/javolution.license.TXT'

        pickFirst '**/libjsc.so'
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libbytehook.so'
    }

    signingConfig = {
        //This are the play store signing config.
        playStore {
            Properties releaseProperties = get_prod_key_creds()
            if (releaseProperties != null) {
                storeFile file(releaseProperties.getProperty('KEY_PATH'))
                storePassword releaseProperties.getProperty('KEY_PASSWORD')
                keyAlias releaseProperties.getProperty('KEY_ALIAS')
                keyPassword releaseProperties.getProperty('ALIAS_PASSWORD')
            } else {
                logger.error('Release keystore.properties not found. Generating with debug certificates.')

                Properties debugProperties = get_debug_key_creds()
                storeFile file(debugProperties.getProperty('KEY_PATH'))
                storePassword debugProperties.getProperty('KEY_PASSWORD')
                keyAlias debugProperties.getProperty('KEY_ALIAS')
                keyPassword debugProperties.getProperty('ALIAS_PASSWORD')
            }
        }

        //This are the debug signing config
        debug {
            Properties properties = get_debug_key_creds()
            storeFile file(properties.getProperty('KEY_PATH'))
            storePassword properties.getProperty('KEY_PASSWORD')
            keyAlias properties.getProperty('KEY_ALIAS')
            keyPassword properties.getProperty('ALIAS_PASSWORD')
        }
    }

    defaultAppConfig = {
        multiDexEnabled false

        applicationId releaseDetail.packageName

        minSdkVersion sdk.minSdk
        targetSdkVersion sdk.targetSdk

        //Versions config
        versionCode playStoreVersion.version_code
        versionName "$playStoreVersion.major.$playStoreVersion.minor.$playStoreVersion.patch"

        //strip other than english resources
        resConfigs "en"

        testInstrumentationRunner "com.kevalpatel2106.coreTest.runner.UiTestsRunner"
    }

    defaultLibConfig = {
        minSdkVersion sdk.minSdk
        targetSdkVersion sdk.targetSdk

        //strip other than english resources
        resConfigs "en"

        consumerProguardFiles '../proguard-rules.pro'

        testInstrumentationRunner "com.kevalpatel2106.coreTest.runner.UiTestsRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/repository/schema".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true",
                ]
            }
        }
    }

    lintOption = {
        abortOnError true
        htmlReport true
        xmlReport true
        textReport true
        checkTestSources true
        ignoreWarnings true
        checkDependencies true
    }

    compileOption = {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    testOption = {
        animationsDisabled = true
        unitTests {
            returnDefaultValues true
            includeAndroidResources = true
            all {
                maxParallelForks 4

                minHeapSize = "1024m"
                maxHeapSize = "1596m"

                testLogging {
                    events 'passed', 'skipped', 'failed'
                }
            }
        }
    }

    kotlinOption = {
        freeCompilerArgs += [
                "-Xinline-classes",
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi,androidx.paging.ExperimentalPagingApi"
        ]
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    bundleOption = {
        language {
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    buildFeaturesOption = {
        dataBinding = true
    }

    detektOption = {
        config = files("./detekt-config.yml")
        baseline = file("detekt/baseline.xmk")
        autoCorrect = true
    }
}

def get_debug_key_creds() {
    File debugCredentials = rootProject.file('./.creds/debug_keystore.properties')
    if (debugCredentials.exists()) {
        Properties properties = new Properties()
        properties.load(debugCredentials.newDataInputStream())
        return properties
    } else {
        throw new IllegalAccessException('Debug keystore.properties not found.')
    }
}

def get_prod_key_creds() {
    File debugCredentials = rootProject.file('./.creds/keystore.properties')
    if (debugCredentials.exists()) {
        Properties properties = new Properties()
        properties.load(debugCredentials.newDataInputStream())
        return properties
    } else {
        return null
    }
}

static def getVersionCode() {
    if (System.getenv().containsKey("CI")) {
        def base = 10000
        def code = System.getenv().getOrDefault("GITHUB_RUN_NUMBER", "1").toInteger() + base
        println("CI Version code is: $code")
        return code
    } else {
        return 1
    }
}